name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: VecStore v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## VecStore v${{ steps.get_version.outputs.version }}

            ### Install

            **Rust:**
            ```bash
            cargo add vecstore
            ```

            **Python:**
            ```bash
            pip install vecstore-rs
            ```

            **Docker:**
            ```bash
            docker pull ghcr.io/philipjohnbasile/vecstore:${{ steps.get_version.outputs.version }}
            ```

            ### Downloads
            - [Changelog](https://github.com/PhilipJohnBasile/vecstore/blob/main/CHANGELOG.md)
            - [Documentation](https://docs.rs/vecstore)

            Binary downloads for Linux, macOS, and Windows are available below.

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: vecstore-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: vecstore-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: vecstore-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: vecstore-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: vecstore-windows-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build binary
        run: cargo build --release --bin vecstore --target ${{ matrix.target }}

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.artifact }}.tar.gz vecstore
          mv ${{ matrix.artifact }}.tar.gz ../../..

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.artifact }}.zip vecstore.exe
          mv ${{ matrix.artifact }}.zip ../../..

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_name: ${{ matrix.artifact }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --token ${CARGO_REGISTRY_TOKEN}

  publish-pypi:
    name: Publish to PyPI
    needs: create-release
    uses: ./.github/workflows/python-publish.yml
    secrets: inherit

  publish-npm:
    name: Publish to npm
    needs: create-release
    uses: ./.github/workflows/npm-publish.yml
    secrets: inherit

  publish-docker:
    name: Publish to Docker
    needs: create-release
    uses: ./.github/workflows/docker-publish.yml
    secrets: inherit
